<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'form.registry' shared service.

include_once \dirname(__DIR__, 4).'/vendor/symfony/form/FormRegistryInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/form/FormRegistry.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/form/FormExtensionInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/form/Extension/DependencyInjection/DependencyInjectionExtension.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/form/ResolvedFormTypeFactoryInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/form/Extension/DataCollector/Proxy/ResolvedTypeFactoryDataCollectorProxy.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/form/ResolvedFormTypeFactory.php';

return $this->privates['form.registry'] = new \Symfony\Component\Form\FormRegistry([0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
    'App\\Form\\AvatarUpdateType' => ['privates', 'App\\Form\\AvatarUpdateType', 'getAvatarUpdateTypeService.php', true],
    'App\\Form\\CategoryType' => ['privates', 'App\\Form\\CategoryType', 'getCategoryTypeService.php', true],
    'App\\Form\\ChangePasswordType' => ['privates', 'App\\Form\\ChangePasswordType', 'getChangePasswordTypeService.php', true],
    'App\\Form\\ChangeRoleType' => ['privates', 'App\\Form\\ChangeRoleType', 'getChangeRoleTypeService.php', true],
    'App\\Form\\FeatureType' => ['privates', 'App\\Form\\FeatureType', 'getFeatureTypeService.php', true],
    'App\\Form\\ProjectFeatureType' => ['privates', 'App\\Form\\ProjectFeatureType', 'getProjectFeatureTypeService.php', true],
    'App\\Form\\ProjectType' => ['privates', 'App\\Form\\ProjectType', 'getProjectTypeService.php', true],
    'App\\Form\\RequestResetPassword' => ['privates', 'App\\Form\\RequestResetPassword', 'getRequestResetPasswordService.php', true],
    'App\\Form\\ResetPasswordType' => ['privates', 'App\\Form\\ResetPasswordType', 'getResetPasswordTypeService.php', true],
    'App\\Form\\SpecificFeatureType' => ['privates', 'App\\Form\\SpecificFeatureType', 'getSpecificFeatureTypeService.php', true],
    'App\\Form\\UserType' => ['privates', 'App\\Form\\UserType', 'getUserTypeService.php', true],
    'App\\Form\\UserUpdateType' => ['privates', 'App\\Form\\UserUpdateType', 'getUserUpdateTypeService.php', true],
    'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => ['privates', 'form.type.entity', 'getForm_Type_EntityService.php', true],
    'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => ['privates', 'form.type.choice', 'getForm_Type_ChoiceService.php', true],
    'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' => ['services', 'form.type.file', 'getForm_Type_FileService.php', true],
    'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => ['privates', 'form.type.form', 'getForm_Type_FormService.php', true],
    'Vich\\UploaderBundle\\Form\\Type\\VichFileType' => ['services', 'vich_uploader.form.type.file', 'getVichUploader_Form_Type_FileService.php', true],
    'Vich\\UploaderBundle\\Form\\Type\\VichImageType' => ['services', 'vich_uploader.form.type.image', 'getVichUploader_Form_Type_ImageService.php', true],
], [
    'App\\Form\\AvatarUpdateType' => '?',
    'App\\Form\\CategoryType' => '?',
    'App\\Form\\ChangePasswordType' => '?',
    'App\\Form\\ChangeRoleType' => '?',
    'App\\Form\\FeatureType' => '?',
    'App\\Form\\ProjectFeatureType' => '?',
    'App\\Form\\ProjectType' => '?',
    'App\\Form\\RequestResetPassword' => '?',
    'App\\Form\\ResetPasswordType' => '?',
    'App\\Form\\SpecificFeatureType' => '?',
    'App\\Form\\UserType' => '?',
    'App\\Form\\UserUpdateType' => '?',
    'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => '?',
    'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => '?',
    'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' => '?',
    'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => '?',
    'Vich\\UploaderBundle\\Form\\Type\\VichFileType' => '?',
    'Vich\\UploaderBundle\\Form\\Type\\VichImageType' => '?',
]), ['Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () {
    yield 0 => ($this->privates['form.type_extension.form.transformation_failure_handling'] ?? $this->load('getForm_TypeExtension_Form_TransformationFailureHandlingService.php'));
    yield 1 => ($this->privates['form.type_extension.form.http_foundation'] ?? $this->load('getForm_TypeExtension_Form_HttpFoundationService.php'));
    yield 2 => ($this->privates['form.type_extension.form.validator'] ?? $this->load('getForm_TypeExtension_Form_ValidatorService.php'));
    yield 3 => ($this->privates['form.type_extension.upload.validator'] ?? $this->load('getForm_TypeExtension_Upload_ValidatorService.php'));
    yield 4 => ($this->privates['form.type_extension.csrf'] ?? $this->load('getForm_TypeExtension_CsrfService.php'));
    yield 5 => ($this->privates['form.type_extension.form.data_collector'] ?? $this->load('getForm_TypeExtension_Form_DataCollectorService.php'));
}, 6), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () {
    yield 0 => ($this->privates['form.type_extension.repeated.validator'] ?? ($this->privates['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension()));
}, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () {
    yield 0 => ($this->privates['form.type_extension.submit.validator'] ?? ($this->privates['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension()));
}, 1)], new RewindableGenerator(function () {
    yield 0 => ($this->privates['form.type_guesser.validator'] ?? $this->load('getForm_TypeGuesser_ValidatorService.php'));
    yield 1 => ($this->privates['form.type_guesser.doctrine'] ?? $this->load('getForm_TypeGuesser_DoctrineService.php'));
}, 2))], new \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy(new \Symfony\Component\Form\ResolvedFormTypeFactory(), ($this->privates['data_collector.form'] ?? $this->getDataCollector_FormService())));
